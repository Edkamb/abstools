module Engine;

export ExecutionEngineImpl;

import * from Interfaces;

//********************************************************************
//  POSTPONED 
//********************************************************************

interface Postponed{
	Request request();
	Unit cancel();
}

class PostponedImpl(
	Request request,
	ExecutionEngine engine,
	Int delay
) implements Postponed {

	Bool cancelled = False;

	Unit run(){
		// wait for the timeout delay
		Time t = now(); 
		await timeDifference(now(), t) > delay;
		// notify the execution engine
		if ( not(cancelled) ){
			Unit u = await engine!timedOut(request);
		}
	}
	
	Request request(){ return request; }
	
	Unit cancel(){
		cancelled = True;
	}
	
}

//********************************************************************
//  EXECUTION ENGINE impl 
//********************************************************************

class ExecutionEngineImpl(
	Queriable_RP pool
) implements ExecutionEngine{

	Map<String, List<Postponed>> postponed_map = EmptyMap;

	// ------------------------------------------------------------
	// RequestQueue impl

	Unit addRequest(Request request){
		// retrieve the assigned resource from the pool ...
		String resource_id = await request!resourceId();
		Resource resource = await pool!resource(resourceId);
		if (resource == Nil){
			Unit u = await request!setProgress(-1); // fail the request
		}else{
			// is the resource free ?
			Request current = await resource!request();
			if (current == Nil){
				// YES: then execute this request immediately
				Unit u = await resource!setRequest(request);
			}else{
				// NO: wait until the resource becomes free
				Unit u = this.postponeRequest(request, resource);
			}
		}
	}
	
	Unit postponeRequest(Request request, Resource resource){
		// get the list of postponed requests for the resource
		String resource_id = await resource!id();
		List<Postponed> ps = lookup(postponed_map, resource_id);
		// create a new postponed request in a new COG
		Postponed p = new PostponedImpl(request, this, 10000); // created in a new COG
		// add the new postponed request to the list
		pr = Cons(pending, ps);
		postponed_map = put(postponed_map, resource_id, ps);
		// listen for changes to the resource's request ...
		Unit u = await resource!addResourceListener(this);
	}

	// ------------------------------------------------------------
	// callback for TimeOuts
	
	Unit timedOut(Postponed p){
		// TODO - either
		// 1) check here that the request has not already succeeded
		// 2) cancel the timeout when the request succeeds / fails <--- PREFER THIS !
	
		// fail the request
		Request request = await p!request();
		Unit u = await request!setProgress(-1);
		
		// remove the timeout from the pending list
		String resource_id = await request!resourceId();
		List<Postponed> ps = lookup(postponed_map, resource_id);
		ps = without(ps, p);
		postponed_map = put(postponed_map, resource_id, ps); // required?
	}

	// ------------------------------------------------------------
	// ResourceListener impl
	
	Unit requestChanged(Resource resource){
		String resource_id = await resource!id();
		// get the oldest pending request assigned to the resource
		List<Postponed> ps = lookup(postponed_map, resource_id);
		if ( not(isEmpty(ps)) ){
			Request request = await resource!request();
			if (request == Nil){
				// resource is free ...
				// get the first timeout ...
				Postponed p = head(ps);
				Unit u = await p!cancel();
				Request request = await p!request();
				// execute this request immediately
				u = await resource!setRequest(request);
				ps = tail(ps);
		        postponed_map = put(postponed_map, resource_id, ps); // required?
			}
		}
		if (isEmpty(ps)){
			// there are no more postponed requests assigned to the resource
			Unit u = await resource!removeResourceListener(this);
		}
	}

}
